package uo.mp.lab04.dome.model;

import java.util.Objects;

import uo.mp.util.check.ArgumentChecks;

public abstract class Item {

    private String title;
    private boolean gotIt;
    private String comment;
    protected double price;

    public Item(String theTitle, double price) {
	setTitle(theTitle);
	setOwn(false);
	setComment("No comment");
	setPrice(price);
    }

    protected void setPrice(double price) {
	if (price > 1000.0 || price < 0) {
	    throw new IllegalArgumentException("El precio debe positivo y menor que mil");
	}
	this.price = price;

    }

    public double getPrice() {
	return this.price;
    }

    /**
     * 
     * @param arg String with the new title
     * @throws IllegalArgumentException if the argument is null, 0-length or does not contain meaningful characters
     */
    protected void setTitle(String arg) {
	ArgumentChecks.isNotNull(arg);
	ArgumentChecks.isNotEmpty(arg);
	ArgumentChecks.isNotBlank(arg);

	this.title = arg;
    }

    /**
     * 
     * @param boolean true means we own a copy; otherwise, false
     */
    public void setOwn(boolean ownIt) {
	gotIt = ownIt;
    }

    /**
     * 
     * @param arg String with a new comment to the element
     * @implNote If the argument is null or does not contain meaningful characters (other than blanks, new lines, etc)
     *           previous comment stays as it is
     */
    public void setComment(String arg) {
	if (arg != null && !arg.isBlank()) {
	    this.comment = arg;
	}
    }

    /**
     * @return the comment (if any) or default
     */
    public String getComment() {
	return comment;
    }

    /**
     * @return true if we own a copy; false otherwise
     */
    public boolean getOwn() {
	return gotIt;
    }

    /**
     * @return title
     */
    public String getTitle() {
	return this.title;
    }

    // public void print(PrintStream out) {
    // System.out.println("Title: " + this.getTitle());
    // }
    public abstract String toString();

    public abstract String getResponsable();

    @Override
    public int hashCode() {
	return Objects.hash(comment, gotIt, title);
    }

    @Override
    public boolean equals(Object obj) {
	if (this == obj)
	    return true;
	if (obj == null)
	    return false;
	if (getClass() != obj.getClass())
	    return false;
	Item other = (Item) obj;
	return Objects.equals(comment, other.comment) && gotIt == other.gotIt && Objects.equals(title, other.title);
    }

}