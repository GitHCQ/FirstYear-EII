package uo.mp.lab02.game.model;
import java.util.Random;

/**
 * <p> Titulo: Clase Game2048 </p>
 * 
 * <p> Descripcion: A partir de un array bidimensional de numeros y a traves de
 * diferentes operaciones se simula un juego llamado "2048" </p>
 *
 * <p> Copyright: Copyright (c) 2024 </p>
 * <p> Empresa: Escuela de Ingenieria Informatica - Universidad de Oviedo </p>
 * 
 * @author Hugo Carbajales Quintana
 * @version 2024
 */
public class Game2048 {
	
	private int [][] board;
	private static final int DEFAULT_SIZE = 3;

	
	/**
	 * Constructor sin parametros con tablero por defecto de 3*3 
	 * Inicialmente todas las posiciones con valor 0
	 */
	public Game2048() {
	   this.board=new int [DEFAULT_SIZE][DEFAULT_SIZE];
	}

	/**
	 *Constructor que recibe el tamaño del tablero
	 *
	 *@param size tamanio del tablero cuadrado. Si el tamaño no esta entre el minimo (2) 
	 *y el maximo (5) se crea un tablero con el valor por defecto (3)
	 */
	public Game2048(int size) {
		if (size<2 || size>5) {
			this.board=new int[DEFAULT_SIZE][DEFAULT_SIZE];
		}
		else {
				this.board=new int [size][size];
		}	
		for (int i=0;i<board.length;i++) {
			for(int j=0;j<board[i].length;j++) {
				board[i][j]=0;
			}
		}
	}
	
	/**
	 * Inicializa el tablero con la matriz recibida como parametro, Utilizala para proposito de 
	 * test.
	 * Se crea UNA COPIA (se denomina copia defensiva)del parametro 
	 * en el tablero interno para evitar que desde fuera se pueda 
	 * modificar los valores del tablero a posteriori
	 * 
	 * @param matriz cuadrada, de dimensiones entre maximo (5x5) y el minimo (3x3)
	 * conteniendo solo valores potencia de 2. 
	 * 
	 * @throws IllegalArgumentException si parametro null, la dimension es erronea, o 
	 * hay valores inadecuados (no son potencia de 2).
	 */
	
	protected Game2048(int[][] board) {
		if (board == null) {
            throw new IllegalArgumentException("La matriz no puede ser nula.");
        }
		if(board.length>5 || board.length<3) {
			throw new IllegalArgumentException("La matriz no puede tener estas dimensiones.");
		}
		for (int i=0;i<board.length;i++) {
			if(board[i].length!=board.length) {
				throw new IllegalArgumentException("La matriz debe ser cuadrada.");
			}
			for (int j=0;j<board[i].length;j++) {
				int valores=board[i][j];
				if (!powerOfTwoBitwise(valores)) {
					throw new IllegalArgumentException("Los valores de la matriz deben ser potencias de 2.");
				}
			}
		}
        this.board=new int[board.length][board[0].length];
        for(int i=0;i<board.length;i++) {
			for(int j=0;j<board[i].length;j++) {
				this.board[i][j]=board[i][j];
			}
		}
	}
			
	/**
	 * Reinicia todas las posiciones a 0 y llama a next para que incluya un
	 * 2 en una posicion aleatoria
	 */
	public void restart() {
		for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                board[i][j] = 0;
            }
        }
		next();
	}
	/**
	 * Añade un nuevo  2 en una posicion aleatoria vacia
	 * siempre que exista alguna
	 * 
	 */
	public void next() {
		if(!isBoardFull()) {
			Random random =new Random();
			int row,column;
			do {
				row=random.nextInt(board.length);
				column=random.nextInt(board[row].length);
			}while(board[row][column]!=0);
			board[row][column]=2;
			}
		}
	/**
	 * Comprueba si el tablero está lleno. Esto ocurre cuando todas las celdas
	 * o posiciones del tablero tienen un número distinto de cero
	 * @return true si esta el tablero lleno, false si hay algun hueco
	 */
	public boolean isBoardFull() {
		for(int i=0;i<board.length;i++) {
			for(int j=0;j<board[i].length;j++) {
				if (board[i][j]==0) {
					return false;
				}
			}
		}
		return true;
		}
	
	/**
	 * Compacta el tablero a la izquierda, 
	 * dejando en cada fila todos los valores distintos de cero consecutivos 
	 * en las primeras posiciones de la fila 
	 * y todos los ceros en las ultimas posiciones de la fila
	 */
	public void compactLeft() {
		for (int i = 0; i < board.length; i++) {
            compactRowLeft(i);
        }
	}
	/**
	 * Compacta una fila a la izquierda
	 * Recorre la fila y si la posicion contiene 0 se busca una posicion a la derecha
	 * que no contenga 0 y se hace intercambio de valores.
	 * Asegurate de que el algoritmo es eficiente. Si ya esta compactada no sigue comprobando
	 * 
	 */
	private void compactRowLeft(int row) {
		int size=board[row].length;
		for(int i=0;i<size-1;i++) {
			if(board[row][i]==0) {
				int primeraNoVacia=buscarPrimeraDerechaNoVacia(row,i);
				if(primeraNoVacia!=-1) {
					interCambiarValores(row,i,primeraNoVacia);
				}
				else {
					break;
				}
			}
		}
	}
	
	private void interCambiarValores(int row,int i,int posNoVacia) {
		int temp= board[row][i];
		board[row][i]=board[row][posNoVacia];
		board[row][posNoVacia]=temp;
		
	}
	/**
	 * Busca una posicion (columna) a la derecha de la posicion column que 
	 * que contenga un valor distinto de cero y devuelve la posicion si lo encuentra
	 * 
	 * @param row, fila en la que se quire trabajar
	 * @param column, columna a partir de la cual se busca un valor hacia la derecha
	 * @return columna encontrada con valor positivo 
	 *         o -1 si no encuentra ninguna a su derecha
	 */
	private int buscarPrimeraDerechaNoVacia(int row,int column) {
		for(int i=column+1;i<board[row].length;i++) {
			if (board[row][i]!=0) {
				return i;
			}
		}
		return -1;
	}

	/**
	 * Compacta el tablero a la derecha, 
	 * dejando en cada fila todos los valores distintos de cero consecutivos 
	 * en las ultimas posiciones de la fila 
	 * y todos los ceros en las primeras posiciones de la fila
	 */
	public void compactRight() {
		for (int i = 0; i < board.length; i++) {
            compactRowRight(i);
        }
	}
	/**
	 * Compacta una fila a la derecha
	 * Recorre la fila y si la posicion contiene 0 se busca una posicion a la izquierda
	 * que no contenga 0 y se hace intercambio de valores.
	 * Asegurate de que el algoritmo es eficiente. Si ya esta compactada no sigue comprobando
	 * 
	 */
	private void compactRowRight(int row) {
		int size=board[row].length;
		for(int i=size-1;i>0;i--) {
			if(board[row][i]==0) {
				int primeraNoVacia=buscarPrimeraIzquierdaNoVacia(row,i);
				if(primeraNoVacia!=-1) {
					int temp= board[row][i];
					board[row][i]=board[row][primeraNoVacia];
					board[row][primeraNoVacia]=temp;
				}
				else {
					break;
				}
			}
		}
	}
	/**
	 * Busca una posicion (columna) a la izquierda de la posicion column que 
	 * que contenga un valor distinto de cero y devuelve la posicion si lo encuentra
	 * 
	 * @param row, fila en la que se quire trabajar
	 * @param column, columna a partir de la cual se busca un valor hacia la izquierda
	 * @return columna encontrada con valor positivo 
	 *         o -1 si no encuentra ninguna a su derecha
	 */
	private int buscarPrimeraIzquierdaNoVacia(int row,int position) {
		for(int i=position-1;i>=0;i--) {
			if (board[row][i]!=0) {
				return i;
			}
		}
		return -1;
	}
	/**
	 * Compacta el tablero hacia arriba, 
	 * dejando en cada columna todos los valores distintos de cero consecutivos 
	 * en las primeras posiciones de las columnas 
	 * y todos los ceros en las ultimas posiciones
	 */
	public void compactUp() {
		for(int i=0;i < board[0].length; i++) {
			compactColumnUp(i);
		}
	}
			
	/**
	 * Compacta una una columna hacia arriba
	 * Recorre la columna de abajo a arriba y si la posicion contiene 0 se busca una posicion arriba
	 * que no contenga 0 y se hace intercambio de valores.
	 * Asegurate de que el algoritmo es eficiente. Si ya esta compactada no sigue comprobando
	 * 
	 */
	private void compactColumnUp(int column) {
	    for (int i = 0; i <board.length-1; i++) {
	        if (board[i][column] == 0) {
	            int primeraNoVacia = buscarPrimeraAbajoNoVacia(column, i);
	            if (primeraNoVacia != -1) {
	                int temp = board[i][column];
	                board[i][column] = board[primeraNoVacia][column];
	                board[primeraNoVacia][column] = temp;
	            } else {
	                break;
	            }
	        }
	    }
	}
	/**
	 * Busca una posicion (fila) a la debajo de la posicion row que 
	 * que contenga un valor distinto de cero y devuelve la posicion si lo encuentra
	 * 
	 * @param column, columna en la que se quire trabajar
	 * @param row, fila a partir de la cual se busca un valor hacia abajo
	 * @return columna encontrada con valor positivo 
	 *         o -1 si no encuentra ninguna a su derecha
	 */
	private int buscarPrimeraAbajoNoVacia(int column, int position) {
	    for (int i = position + 1; i < board.length; i++) {
	        if (board[i][column] != 0) {
	            return i;
	        }
	    }
	    return -1;
	}
	/**
	 * Compacta el tablero hacia abajo, 
	 * dejando en cada columna todos los valores distintos de cer consecutivos 
	 * en las ultimas posiciones de las columnas
	 * y todos los ceros en las primeras posiciones
	 */
	public void compactDown() {
		for (int i=0;i<board[0].length;i++) {
			compactColumnDown(i);
		}
    }
	/**
	 * Compacta una una columna hacia abajo
	 * Recorre la columna de arriba a abajo y si la posicion contiene 0 se busca una posicion arriba
	 * que no contenga 0 y se hace intercambio de valores.
	 * Asegurate de que el algoritmo es eficiente. Si ya esta compactada no sigue comprobando
	 * 
	 */
	private void compactColumnDown(int column) {
	    for (int i = board.length-1; i >=0; i--) {
	        if (board[i][column] == 0) {
	            int primeraNoVacia = buscarPrimeraArribaNoVacia(column, i);
	            if (primeraNoVacia != -1) {
	                int temp = board[i][column];
	                board[i][column] = board[primeraNoVacia][column];
	                board[primeraNoVacia][column] = temp;
	                
	            } else {
	                break;
	            }
	        }
	    }
	}
	/**
	 * Compacta a la derecha los números de cada fila
	 * Suma de dos en dos los números consecutivos iguales 
	 * dejando el resultado en la casilla derecha. 
	 * Finalmente, se vuelve a compactar.
	 */
	public void moveRight() {
		compactRight();
		for(int i=0;i<board.length;i++) {
			for(int j=0;j<board.length-1;j++) {
				if(board[i][j]!=0 && board[i][j]==board[i][j+1]) {
					int valor1=board[i][j];
					int valor2=board[i][j+1];
					board[i][j]=0;
					board[i][j+1]=valor1+valor2;
				}
			}
		}
		
		compactRight();
	}
	/**
	 * Busca una posicion (fila) arriba  de la posicion column que 
	 * que contenga un valor distinto de cero y devuelve la posicion si lo encuentra
	 * 
	 * @param column, columna en la que se quire trabajar
	 * @param row, fila a partir de la cual se busca un valor hacia abajo
	 * @return columna encontrada con valor positivo 
	 *         o -1 si no encuentra ninguna a su derecha
	 */
	private int buscarPrimeraArribaNoVacia(int column, int position) {
	    for (int i = position -1 ; i >= 0; i--) {
	        if (board[i][column] != 0) {
	            return i;
	        }
	    }
	    return -1;
	}
	private void transpose() {
		for(int i=0;i<board.length;i++) {
			for(int j=i+1;j<board[i].length;j++) {
				int temp=board[i][j];
				board[i][j]=board[j][i];
				board[j][i]=temp;;
			}
		}
	}
	private void reverseRows() {
		for(int i=0;i<board.length;i++) {
			for(int j=0;j<board[i].length/2;j++) {
				if(i==0 || i%2==0) {
					int temp=board[i][j];
					board[i][j]=board[i][board.length-1-j];
					board[i][board.length-1-j]=temp;
				}
			}
		}
	}
	public void moveLeft() {
		transpose();
		reverseRows();
		compactRight();
		for(int i=0;i<board.length;i++) {
			for(int j=0;j<board.length-1;j++) {
				if(board[i][j]!=0 && board[i][j]==board[i][j+1]) {
					int valor1=board[i][j];
					int valor2=board[i][j+1];
					board[i][j]=0;
					board[i][j+1]=valor1+valor2;
				}
			}
		}
		
		compactRight();
		
	}
	/**
	 * @return un String con los datos de la matriz en formato para ser mostrado por pantalla
	 * Habra 5 espacios para cada posicion en la misma fila y un \n al final de cada fila
	 * Ejemplo. Para luego escribir:
	 *    2    2    0
	 *    2    0    0
	 *    2    0    2
	 *    Se devuelve el String "2    2    0\n2    0    0\n2    0    2\n"
	 */
	public String toString() {
		String resultado="";
		for(int [] fila:board) {
			for(int valor:fila) {
				resultado+=String.format("%-5d", valor);
			}
			resultado+="\n";
		}
		return resultado;
		
	}
	
	
	/**
	 * Devuelve UNA COPIA de la matriz 
	 * 
	 * @return copia exacta del tablero
	 */
	protected int[][] getBoard() {
		int [][] copia=new int[board.length][];
		for(int i=0;i<board.length;i++) {
			copia[i]=new int[board[i].length];
			for(int j=0;j<board[i].length;j++) {
				copia[i][j]=this.board[i][j];
			}
		}
		return copia;
	}
	
	/**
	 * @param n entero >= 0
	 * @return true si n is potencia de 2; false en otro caso
	 * 
	 */
	private boolean powerOfTwoBitwise(int n) {
		return (n & (n - 1)) == 0;  // No hay que hacer nada en este metodo
	}
	
	

}
