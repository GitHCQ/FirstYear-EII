package uo.mp.lab06.greenhouse.controllers;

import java.util.ArrayList;
import java.util.List;

import uo.mp.lab06.greenhouse.actuators.doors.Door;
import uo.mp.lab06.greenhouse.sensors.TemperatureSensor;

/**
 * 
 * @author mp
 * @version 2.0
 */
public class TemperatureController {
	public static final double MAX_TEMPERATURE = 22;
	public static final double MIN_TEMPERATURE = 19;

	private List<TemperatureSensor> sensors = new ArrayList<>();	
	private List<Door> doors = new ArrayList<>();
		
		
	public void add(TemperatureSensor sensor) {
		this.sensors.add(sensor);
	}

	public void add(Door door) {
		this.doors.add(door);
	}

	/**
	 * Maneja las puertas para mantener la temperatura entre 19 y 22 grados
	 *
	 * @return Una lista de mensajes generados cuando se monitoriza
	 */
	public List<String> monitor() {
		
		
				
		/*
		 * Fuera hace frío, por lo que la apertura de las puertas siempre implica enfriar el interior.
		 * 
		 * Cuando getAverageTemperature() es mayor que MAX_TEMPERATURE) 
			• Deberían abrirse algunas puertas para bajar la temperatura (si es posible)
			• Cada grado de diferencia (getAverageTemperature()-MAX_TEMPERATURE)) 
			     implica la apertura del 10% de las puertas (si es posible)
			• Mostrar un mensaje que indique cuántas puertas están a punto de abrirse (si es posible)
		 * 
		 Cuando getAverageTemperature() es menor que MIN_TEMPERATURE 
			• Deberían cerrarse algunas puertas para aumentar la temperatura (si es posible)
			• Cada grado de diferencia (MIN_TEMPERATURE-getAverageTemperature()) 
			     implica el cierre del 10% de las puertas (si es posible)
			• Mostrar un mensaje que indique cuántas puertas están a punto de cerrarse (si es posible)
		 *
		 * En caso contrario, se mostrará un mensaje  que indique simplemente la temperatura media
		 */

		/*
		 *  Las cadenas que se devolverán al panel de control para informar al operario
		 *   después de todas y cada una de las ejecuciones del método monitor()
		 */
		List<String> messages ;	
		double temperature=getAverageTemperature();
		if(temperature>MAX_TEMPERATURE) {
			//Enfriar
		}else if(temperature<MIN_TEMPERATURE) {
			//Calentar
			
		}else {
			//No hacer nada solo enviar mensaje
			
		}
		
		// TO DO
		
		return messages;
	}
	
	/**
	 * Calienta el invernadero
	 * @param temp la temperatura media
	 * @return una lista de mensajes para informar al operario, producidos al intentar
     *         calentar el invernadero
	 * 
	 */
	private List<String> warmUp(double temp) {
		return null;
	}
	
	/**
	 * Intenta cerrar doorsToClose puertas 
	 * @param doorsToClose número de pertas a cerrar 
	 * @return una lista de mensajes para informar al operario, producidos al intentar
     *         cerrar tantas puertas como indica el parámetro
	 * 
	 */
	private List<String> closeDoors(int doorsToClose) {
		return null;
	}
	
	/**
	 * Enfria el invernadero
	 * @param temp la temperatura media
	 * @return una lista de mensajes para informar al operario, producidos al intentar
     *         enfriar el invernadero
	 */
	private List<String> coolDown(double temp) {
		return null;
	}

	/**
	 * Intenta abrir doorsToOpen puertas
	 * @param doorsToOpen  número de pertas a abrir
	 * @return una lista de mensajes para informar al operario, producidos al intentar
     *         abrir tantas puertas como indica el parámetro
	 */
	private List<String> openDoors(int doorsToOpen) {		
		return null;
	}
	
	
	private String rightTemperature(double temp) {
		return "Average temperature " +  temp + " is right";
	}
	
	/**
	 * Obtiene la temperatura media en el invernadero
	 * 
	 * @return la temperatura media en el invernadero
	 */
	private double getAverageTemperature() {
		double addition = 0;
		for(TemperatureSensor sensor : sensors) {
			addition += sensor.getTemperature();
		}
		return addition / sensors.size();
	}

}
